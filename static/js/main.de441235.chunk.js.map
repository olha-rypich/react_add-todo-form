{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","completed","id","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","onSubmit","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","action","method","event","preventDefault","htmlFor","type","autoComplete","value","placeholder","onChange","target","disabled","initialTodos","App","newTodos","setNewTodos","data","newTodo","Math","max","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de441235.chunk.js","sourcesContent":["import { UserInfoProps } from '../../types';\n\nexport const UserInfo = ({ user }: UserInfoProps) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import { TodoInfoProps } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\nexport const TodoInfo = ({ todo }: TodoInfoProps) => {\n  return (\n    <article\n      className={`TodoInfo ${todo.completed && 'TodoInfo--completed'}`}\n      data-id={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { TodoListProps } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\nexport const TodoList = ({ todos }: TodoListProps) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n      || null;\n}\n","import React, { useState } from 'react';\nimport { Todo } from '../../types';\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n\n    // setHasTitleError(false);\n    // setHasUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      className=\"TodoForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"todo-title\">Title:&nbsp;</label>\n        <input\n          id=\"todo-title\"\n          type=\"text\"\n          autoComplete=\"off\"\n          value={title}\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          onChange={handleTitleChange}\n        />\n\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"todo-user\">User:&nbsp;</label>\n        <select\n          id=\"todo-user\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n          {usersFromServer.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { Todo } from './types';\nimport { getUserById } from './services/user';\n\nimport todosFromServer from './api/todos';\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n\nexport const App: React.FC = () => {\n  const [newTodos, setNewTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = ({ id, ...data }: Todo) => {\n    const newTodo = {\n      id: getNewTodoId(newTodos),\n      ...data,\n    };\n\n    setNewTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}